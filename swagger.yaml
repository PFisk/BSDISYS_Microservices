swagger: "2.0"
info:
  description: "Test server for ITU Information"
  version: "1.0"
  title: "ITU Super API"
host: "itusuperapi.swagger.io"
tags:
- name: "student"
  description: "Information about the student goes here"
- name: "teacher"
  description: "Information about the teacher goes here"
- name: "teacher ratings"
  description: "Information about student ratings for teachers go here"
- name: "course"
  description: "Information about the course goes here"
- name: "course ratings"
  description: "Information about student ratings for courses go here"
schemes: 
 - "https"
 - "http"
paths:
  /student:
    post:
      tags:
      - "student"
      summary: "Add a new student"
      operationId: "addStudent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object that should be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses: 
        "405":
          description: "Invalid input"
    put:
      tags:
      - "student"
      summary: "Modify an existing student"
      operationId: "modifyStudent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object that should be changed in the system"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses: 
        "400":
          description: Invalid ID
        "404":
          description: ID not found
        "405":
          description: "Invalid input"
  /student/{student_id}:
    get:
      tags:
      - "student"
      summary: "Returns information about the student"
      description: "Returns a student object from its ID"
      operationId: "getStudentByID"
      produces:
      - "application/json"
      parameters:
      - name: "student_id"
        in: "path"
        description: "ID of student to return"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Student found!"
          schema: 
            $ref: "#/definitions/Student"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
          
    delete:
      tags:
      - "student"
      summary: "Deletes a student"
      description: ""
      operationId: "deleteStudent"
      produces:
      - "application/json"
      parameters:
      - name: "student_id"
        in: "path"
        description: "Student ID to delete"
        required: true
        type: integer
        format: int64
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
  /student/{student_id}/workload:
    get:
      tags:
      - "student"
      summary: "Find workload of student with ID"
      description: "Sums the workloads of the courses associated with the student."
      operationId: "getWorkload"
      produces: 
      - "application/json"
      parameters:
      - name: "student_id"
        in: "path"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Workload found!"
          schema:
            type: integer
            example: 30
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Student not found"
  /student/{student_id}/course_ratings:
    get:
      tags:
      - "student"
      summary: "Finds all of a students satisfaction ratings for courses"
      description: "Gets all of the rating that a student has given for courses. Idea being, that you might want to be able to display all of a specific users rating, or order their courses by favouritism."
      operationId: "getUserCourseRatings"
      produces: 
      - "application/json"
      parameters:
      - name: "student_id"
        in: "path"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Rating found!"
          schema:
            type: array
            items:
              $ref: "#/definitions/CourseRating"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "ID not found"
  /student/{student_id}/teacher_ratings:
    get:
      tags:
      - "student"
      summary: "Finds all of a students satisfaction ratings for teachers"
      description: "Returns all of a students teacher-ratings similairly to the course_ratings endpoint above, and for similair purposes."
      operationId: "getUserTeacherRatings"
      produces: 
      - "application/json"
      parameters:
      - name: "student_id"
        in: "path"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Rating found!"
          schema:
            type: array
            items:
              $ref: "#/definitions/CourseRating"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "ID not found"
          
  /teacher:
    post:
      tags:
      - "teacher"
      summary: "Add a new teacher"
      parameters:
      - in: "body"
        name: "body"
        description: "Teacher to be added"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
      responses: 
        "405":
          description: "Invalid input"
    put:
      tags:
      - "teacher"
      summary: "Modify an existing teacher"
      parameters:
      - in: "body"
        name: "body"
        description: "Teacher to be added"
        required: true
        schema:
          $ref: "#/definitions/Teacher"
      responses:
        "400":
          description: "Invalid ID"
        "404":
          description: "ID not found"
        "405":
          description: "Invalid input"
  /teacher/{teacher_id}:
    get:
      tags:
      - "teacher"
      summary: "Find teacher by ID"
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of teacher to return"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Teacher found!"
          schema:
            $ref: '#/definitions/Teacher'
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
    delete:
      tags:
      - "teacher"
      summary: "Delete teacher by ID"
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of teacher to delete"
        required: true
        type: integer
        format: int64
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
  /teacher/{teacher_id}/average_rating:
    get:
      tags:
      - "teacher ratings"
      summary: "Get the average rating of a teacher"
      description: "Goes through the all the ratings the specified teacher has gotten, and returns the average as a floating-point number."
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of teacher to return"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Teacher found!"
          schema:
            type: number
            format: float
            example: 8.75
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
  /teacher/{teacher_id}/ratings:
    get:
      tags:
      - "teacher ratings"
      summary: "Gets the all ratings of a teacher"
      description: "Returns a list of all ratings/reviews of a teacher. Easily gives an overview of how students are feeling about any given teahcer."
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of teacher"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Teacher found!"
          schema:
            type: array
            items:
              $ref: "#/definitions/TeacherRating"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
    post:
      tags:
      - "teacher ratings"
      summary: "Add a rating to a teacher"
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of the teacher"
        required: true
        type: integer
        format: int64
      - name: "rating"
        in: "body"
        description: "Rating to be added"
        required: true
        schema:
          $ref: "#/definitions/TeacherRating"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "teacher ratings"
      summary: "Modify an existing rating of a teacher"
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of the teacher"
        required: true
        type: integer
        format: int64
      - name: "rating"
        in: "body"
        description: "Rating to be modified"
        required: true
        schema:
          $ref: "#/definitions/TeacherRating"
      responses:
        "405":
          description: "Invalid input"
  /teacher/{teacher_id}/ratings/{rating_id}:
    get:
      tags:
      - "teacher ratings"
      summary: "Gets the rating of a teacher"
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of teacher"
        required: true
        type: integer
        format: int64
      - name: "rating_id"
        in: "path"
        description: "ID of rating"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Teacher found!"
          schema:
            $ref: "#/definitions/TeacherRating"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher or Rating not found"
    delete:
      tags:
      - "teacher ratings"
      summary: "Removes the rating of a teacher"
      parameters:
      - name: "teacher_id"
        in: "path"
        description: "ID of teacher"
        required: true
        type: integer
        format: int64
      - name: "rating_id"
        in: "path"
        description: "ID of rating"
        required: true
        type: integer
        format: int64
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher or Rating not found"
  /course:
    post:
      tags:
      - "course"
      summary: "Add a new course"
      parameters:
      - name: "body"
        in: "body"
        description: "The course to be added"
        required: true
        schema:
          $ref: '#/definitions/Course'
      responses:
        "201":
          description: "Success"
        "400":
          description: "Invalid input"
    put:
      tags:
      - "course"
      summary: "Modify an existing course"
      parameters:
      - name: "body"
        in: "body"
        description: "The changes to be made"
        required: true
        schema:
          $ref: '#/definitions/Course'
      responses:
        "201":
          description: "Changed"
        "400":
          description: "Invalid ID"
        "404":
          description: "Course with id not found"
        "405":
          description: "Invalid input"
  /course/{course_id}:
    get:
      tags:
      - "course"
      summary: "Find course by ID"
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course to return"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Course found!"
          schema:
            $ref: '#/definitions/Course'
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Course not found"
    delete:
      tags:
      - "course"
      summary: "Remove course by ID"
      parameters:
      - name: "course_id"
        in: "path"
        description: "id of the course to remove"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "201":
          description: "Success"
        "400":
          description: Invalid input
        "404":
          description: Course with id not found
  /course/{course_id}/average_rating:
    get:
      tags:
      - "course ratings"
      summary: "Gets the average rating of a course"
      description: "Returns the average rating of a course, as derived by it's reviews, as a floating-point number."
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of the course"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Course found!"
          schema:
            type: number
            format: 0-10
            example: 7.45
        "400":
          description: "Invalid ID"
        "404":
          description: "ID not found"
  /course/{course_id}/ratings:
    get:
      tags:
      - "course ratings"
      summary: "Gets the ratings of a course"
      description: "Returns an array with all of the ratings/reviews of a course, in no particular order. Can easily get a feeling for how student are liking a certain course."
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Course found!"
          schema:
            type: array
            items:
              $ref: "#/definitions/CourseRating"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Teacher not found"
    post:
      tags:
      - "course ratings"
      summary: "Add a rating to a course"
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of the course"
        required: true
        type: integer
        format: int64
      - name: rating
        in: "body"
        description: "Rating to be added"
        required: true
        schema:
          $ref: "#/definitions/CourseRating"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "course ratings"
      summary: "Modify an existing rating of a course"
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of the course"
        required: true
        type: integer
        format: int64
      - name: "rating"
        in: "body"
        description: "Rating to be modified"
        required: true
        schema:
          $ref: "#/definitions/CourseRating"
      responses:
        "405":
          description: "Invalid input"
  /course/{course_id}/ratings/{rating_id}:
    get:
      tags:
      - "course ratings"
      summary: "Gets the rating of a course"
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: integer
        format: int64
      - name: "rating_id"
        in: "path"
        description: "ID of rating"
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: "Rating found!"
          schema:
            $ref: "#/definitions/CourseRating"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Course or Rating not found"
    delete:
      tags:
      - "course ratings"
      summary: "Removes the rating of a course"
      parameters:
      - name: "course_id"
        in: "path"
        description: "ID of course"
        required: true
        type: integer
        format: int64
      - name: "rating_id"
        in: "path"
        description: "ID of rating"
        required: true
        type: integer
        format: int64
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Course or Rating not found"
          
definitions:
  Student:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        example: John Doe
      courses:
        type: array
        description: "IDs of courses taken by student"
        items:
          type: integer
          format: int32
        example:
        - 2
        - 4
      cpr:
        type: string
        format: "DDMMYYXXXX"
      email:
        type: string
        format: email
        example: "jodo@itu.dk"
      phone:
        type: string
        format: phone_nr
        example: "48 48 48 48"
  Teacher:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        example: Agata
      coursesTaught:
        type: array
        description: "IDs of courses taught by teacher"
        items:
          type: integer
          format: int32
        example:
        - 2
        - 4
      cpr:
        type: string
        format: "DDMMYYXXXX"
      email:
        type: string
        format: email
        example: "agata@itu.dk"
      phone:
        type: string
        format: phone_nr
        example: "48 48 48 48"
  TeacherRating:
    type: object
    properties:
      student_id:
        description: "The student giving the rating"
        type: integer
        format: int32
        example: 22
      teacher_id:
        description: "The teacher getting rated"
        type: integer
        format: int32
        example: 0
      rating:
        description: "The rating the student is giving"
        type: integer
        format: 1-10
        example: 10
      comment:
        description: "A comment a student would like to leave with their rating"
        type: string
        example: "By far my favourite teacher! I love coming to her class"
  Course:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        example: 'DISYS'
      description:
        type: string
        example: "Learn about distributed systems and concurrency!"
      teachers:
        type: array
        description: "The IDs of the teachers teaching this course."
        items:
          type: integer
          format: int32
        example:
        - 0
      workload:
        type: number
        format: float
        example: 7.5
        description: "The ECTS count of the course"
  CourseRating:
    type: object
    properties:
      student_id:
        description: "The student giving the rating"
        type: integer
        format: int32
        example: 22
      course_id:
        description: "The course getting rated"
        type: integer
        format: int32
        example: 0
      rating:
        description: "The rating the student is giving"
        type: integer
        format: 1-10
        example: 9
      comment:
        description: "A comment a student could turn in with their rating"
        type: string
        example: "Love the class, just wish there was more Agata!"